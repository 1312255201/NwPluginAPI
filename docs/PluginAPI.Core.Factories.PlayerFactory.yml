### YamlMime:ManagedReference
items:
- uid: PluginAPI.Core.Factories.PlayerFactory
  commentId: T:PluginAPI.Core.Factories.PlayerFactory
  id: PlayerFactory
  parent: PluginAPI.Core.Factories
  children:
  - PluginAPI.Core.Factories.PlayerFactory.BaseType
  - PluginAPI.Core.Factories.PlayerFactory.Create(PluginAPI.Core.Interfaces.IGameComponent)
  langs:
  - csharp
  - vb
  name: PlayerFactory
  nameWithType: PlayerFactory
  fullName: PluginAPI.Core.Factories.PlayerFactory
  type: Class
  source:
    remote:
      path: NwPluginAPI/Core/Factories/PlayerFactory.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: PlayerFactory
    path: ../NwPluginAPI/Core/Factories/PlayerFactory.cs
    startLine: 8
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Factories
  summary: "\nA factory to create <xref href=\"PluginAPI.Core.Interfaces.IPlayer\" data-throw-if-not-resolved=\"false\"></xref>&apos;s.\n"
  example: []
  syntax:
    content: 'public class PlayerFactory : Factory<Player>, IEntityFactory<Player>'
    content.vb: >-
      Public Class PlayerFactory
          Inherits Factory(Of Player)
          Implements IEntityFactory(Of Player)
  inheritance:
  - System.Object
  - PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  implements:
  - PluginAPI.Core.Factories.IEntityFactory{PluginAPI.Core.Player}
  inheritedMembers:
  - PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Get
  - PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.DefaultServer
  - PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  - PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Get(PluginAPI.Core.Interfaces.IGameComponent)
  - PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PluginAPI.Core.Factories.PlayerFactory.BaseType
  commentId: P:PluginAPI.Core.Factories.PlayerFactory.BaseType
  id: BaseType
  parent: PluginAPI.Core.Factories.PlayerFactory
  langs:
  - csharp
  - vb
  name: BaseType
  nameWithType: PlayerFactory.BaseType
  fullName: PluginAPI.Core.Factories.PlayerFactory.BaseType
  type: Property
  source:
    remote:
      path: NwPluginAPI/Core/Factories/PlayerFactory.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: BaseType
    path: ../NwPluginAPI/Core/Factories/PlayerFactory.cs
    startLine: 10
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Factories
  syntax:
    content: public virtual Type BaseType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Overridable ReadOnly Property BaseType As Type
  overload: PluginAPI.Core.Factories.PlayerFactory.BaseType*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: PluginAPI.Core.Factories.PlayerFactory.Create(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.PlayerFactory.Create(PluginAPI.Core.Interfaces.IGameComponent)
  id: Create(PluginAPI.Core.Interfaces.IGameComponent)
  parent: PluginAPI.Core.Factories.PlayerFactory
  langs:
  - csharp
  - vb
  name: Create(IGameComponent)
  nameWithType: PlayerFactory.Create(IGameComponent)
  fullName: PluginAPI.Core.Factories.PlayerFactory.Create(PluginAPI.Core.Interfaces.IGameComponent)
  type: Method
  source:
    remote:
      path: NwPluginAPI/Core/Factories/PlayerFactory.cs
      branch: 13.0.0
      repo: https://github.com/northwood-studios/NwPluginAPI.git
    id: Create
    path: ../NwPluginAPI/Core/Factories/PlayerFactory.cs
    startLine: 17
  assemblies:
  - PluginAPI
  namespace: PluginAPI.Core.Factories
  summary: "\nCreates a new <xref href=\"PluginAPI.Core.Interfaces.IPlayer\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public override Player Create(IGameComponent component)
    parameters:
    - id: component
      type: PluginAPI.Core.Interfaces.IGameComponent
      description: The <xref href="PluginAPI.Core.Interfaces.IGameComponent" data-throw-if-not-resolved="false"></xref>.
    return:
      type: PluginAPI.Core.Player
      description: The created <xref href="PluginAPI.Core.Interfaces.IPlayer" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function Create(component As IGameComponent) As Player
  overridden: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Create(PluginAPI.Core.Interfaces.IGameComponent)
  overload: PluginAPI.Core.Factories.PlayerFactory.Create*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: PluginAPI.Core.Interfaces.IPlayer
  commentId: T:PluginAPI.Core.Interfaces.IPlayer
  parent: PluginAPI.Core.Interfaces
  name: IPlayer
  nameWithType: IPlayer
  fullName: PluginAPI.Core.Interfaces.IPlayer
- uid: PluginAPI.Core.Factories
  commentId: N:PluginAPI.Core.Factories
  name: PluginAPI.Core.Factories
  nameWithType: PluginAPI.Core.Factories
  fullName: PluginAPI.Core.Factories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  commentId: T:PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  parent: PluginAPI.Core.Factories
  definition: PluginAPI.Core.Factories.Factory`1
  name: Factory<Player>
  nameWithType: Factory<Player>
  fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>
  nameWithType.vb: Factory(Of Player)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player)
  name.vb: Factory(Of Player)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1
    name: Factory
    nameWithType: Factory
    fullName: PluginAPI.Core.Factories.Factory
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Core.Player
    name: Player
    nameWithType: Player
    fullName: PluginAPI.Core.Player
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1
    name: Factory
    nameWithType: Factory
    fullName: PluginAPI.Core.Factories.Factory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Core.Player
    name: Player
    nameWithType: Player
    fullName: PluginAPI.Core.Player
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.IEntityFactory{PluginAPI.Core.Player}
  commentId: T:PluginAPI.Core.Factories.IEntityFactory{PluginAPI.Core.Player}
  parent: PluginAPI.Core.Factories
  definition: PluginAPI.Core.Factories.IEntityFactory`1
  name: IEntityFactory<Player>
  nameWithType: IEntityFactory<Player>
  fullName: PluginAPI.Core.Factories.IEntityFactory<PluginAPI.Core.Player>
  nameWithType.vb: IEntityFactory(Of Player)
  fullName.vb: PluginAPI.Core.Factories.IEntityFactory(Of PluginAPI.Core.Player)
  name.vb: IEntityFactory(Of Player)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.IEntityFactory`1
    name: IEntityFactory
    nameWithType: IEntityFactory
    fullName: PluginAPI.Core.Factories.IEntityFactory
  - name: <
    nameWithType: <
    fullName: <
  - uid: PluginAPI.Core.Player
    name: Player
    nameWithType: Player
    fullName: PluginAPI.Core.Player
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Core.Factories.IEntityFactory`1
    name: IEntityFactory
    nameWithType: IEntityFactory
    fullName: PluginAPI.Core.Factories.IEntityFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PluginAPI.Core.Player
    name: Player
    nameWithType: Player
    fullName: PluginAPI.Core.Player
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Get
  commentId: M:PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Get
  parent: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  definition: PluginAPI.Core.Factories.Factory`1.Get
  name: Get()
  nameWithType: Factory<Player>.Get()
  fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.Get()
  nameWithType.vb: Factory(Of Player).Get()
  fullName.vb: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).Get()
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.Get
    name: Get
    nameWithType: Factory<Player>.Get
    fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.Get
    name: Get
    nameWithType: Factory(Of Player).Get
    fullName: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.DefaultServer
  commentId: P:PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.DefaultServer
  parent: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  definition: PluginAPI.Core.Factories.Factory`1.DefaultServer
  name: DefaultServer
  nameWithType: Factory<Player>.DefaultServer
  fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.DefaultServer
  nameWithType.vb: Factory(Of Player).DefaultServer
  fullName.vb: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).DefaultServer
- uid: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  parent: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  definition: PluginAPI.Core.Factories.Factory`1.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  name: GetOrAdd(IGameComponent)
  nameWithType: Factory<Player>.GetOrAdd(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of Player).GetOrAdd(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
    name: GetOrAdd
    nameWithType: Factory<Player>.GetOrAdd
    fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.GetOrAdd
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
    name: GetOrAdd
    nameWithType: Factory(Of Player).GetOrAdd
    fullName: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).GetOrAdd
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Get(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Get(PluginAPI.Core.Interfaces.IGameComponent)
  parent: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  definition: PluginAPI.Core.Factories.Factory`1.Get(PluginAPI.Core.Interfaces.IGameComponent)
  name: Get(IGameComponent)
  nameWithType: Factory<Player>.Get(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.Get(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of Player).Get(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).Get(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.Get(PluginAPI.Core.Interfaces.IGameComponent)
    name: Get
    nameWithType: Factory<Player>.Get
    fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.Get(PluginAPI.Core.Interfaces.IGameComponent)
    name: Get
    nameWithType: Factory(Of Player).Get
    fullName: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  parent: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  definition: PluginAPI.Core.Factories.Factory`1.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  name: AddIfNotExists(IGameComponent)
  nameWithType: Factory<Player>.AddIfNotExists(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of Player).AddIfNotExists(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
    name: AddIfNotExists
    nameWithType: Factory<Player>.AddIfNotExists
    fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.AddIfNotExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
    name: AddIfNotExists
    nameWithType: Factory(Of Player).AddIfNotExists
    fullName: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).AddIfNotExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Interfaces
  commentId: N:PluginAPI.Core.Interfaces
  name: PluginAPI.Core.Interfaces
  nameWithType: PluginAPI.Core.Interfaces
  fullName: PluginAPI.Core.Interfaces
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: PluginAPI.Core.Factories.Factory`1
  commentId: T:PluginAPI.Core.Factories.Factory`1
  name: Factory<T>
  nameWithType: Factory<T>
  fullName: PluginAPI.Core.Factories.Factory<T>
  nameWithType.vb: Factory(Of T)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of T)
  name.vb: Factory(Of T)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1
    name: Factory
    nameWithType: Factory
    fullName: PluginAPI.Core.Factories.Factory
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1
    name: Factory
    nameWithType: Factory
    fullName: PluginAPI.Core.Factories.Factory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.IEntityFactory`1
  commentId: T:PluginAPI.Core.Factories.IEntityFactory`1
  name: IEntityFactory<TEntity>
  nameWithType: IEntityFactory<TEntity>
  fullName: PluginAPI.Core.Factories.IEntityFactory<TEntity>
  nameWithType.vb: IEntityFactory(Of TEntity)
  fullName.vb: PluginAPI.Core.Factories.IEntityFactory(Of TEntity)
  name.vb: IEntityFactory(Of TEntity)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.IEntityFactory`1
    name: IEntityFactory
    nameWithType: IEntityFactory
    fullName: PluginAPI.Core.Factories.IEntityFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PluginAPI.Core.Factories.IEntityFactory`1
    name: IEntityFactory
    nameWithType: IEntityFactory
    fullName: PluginAPI.Core.Factories.IEntityFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory`1.Get
  commentId: M:PluginAPI.Core.Factories.Factory`1.Get
  name: Get()
  nameWithType: Factory<T>.Get()
  fullName: PluginAPI.Core.Factories.Factory<T>.Get()
  nameWithType.vb: Factory(Of T).Get()
  fullName.vb: PluginAPI.Core.Factories.Factory(Of T).Get()
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.Get
    name: Get
    nameWithType: Factory<T>.Get
    fullName: PluginAPI.Core.Factories.Factory<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.Get
    name: Get
    nameWithType: Factory(Of T).Get
    fullName: PluginAPI.Core.Factories.Factory(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory`1.DefaultServer
  commentId: P:PluginAPI.Core.Factories.Factory`1.DefaultServer
  name: DefaultServer
  nameWithType: Factory<T>.DefaultServer
  fullName: PluginAPI.Core.Factories.Factory<T>.DefaultServer
  nameWithType.vb: Factory(Of T).DefaultServer
  fullName.vb: PluginAPI.Core.Factories.Factory(Of T).DefaultServer
- uid: PluginAPI.Core.Factories.Factory`1.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory`1.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  name: GetOrAdd(IGameComponent)
  nameWithType: Factory<T>.GetOrAdd(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<T>.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of T).GetOrAdd(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of T).GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
    name: GetOrAdd
    nameWithType: Factory<T>.GetOrAdd
    fullName: PluginAPI.Core.Factories.Factory<T>.GetOrAdd
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.GetOrAdd(PluginAPI.Core.Interfaces.IGameComponent)
    name: GetOrAdd
    nameWithType: Factory(Of T).GetOrAdd
    fullName: PluginAPI.Core.Factories.Factory(Of T).GetOrAdd
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory`1.Get(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory`1.Get(PluginAPI.Core.Interfaces.IGameComponent)
  name: Get(IGameComponent)
  nameWithType: Factory<T>.Get(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<T>.Get(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of T).Get(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of T).Get(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.Get(PluginAPI.Core.Interfaces.IGameComponent)
    name: Get
    nameWithType: Factory<T>.Get
    fullName: PluginAPI.Core.Factories.Factory<T>.Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.Get(PluginAPI.Core.Interfaces.IGameComponent)
    name: Get
    nameWithType: Factory(Of T).Get
    fullName: PluginAPI.Core.Factories.Factory(Of T).Get
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.Factory`1.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory`1.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  name: AddIfNotExists(IGameComponent)
  nameWithType: Factory<T>.AddIfNotExists(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<T>.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of T).AddIfNotExists(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of T).AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
    name: AddIfNotExists
    nameWithType: Factory<T>.AddIfNotExists
    fullName: PluginAPI.Core.Factories.Factory<T>.AddIfNotExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.AddIfNotExists(PluginAPI.Core.Interfaces.IGameComponent)
    name: AddIfNotExists
    nameWithType: Factory(Of T).AddIfNotExists
    fullName: PluginAPI.Core.Factories.Factory(Of T).AddIfNotExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.PlayerFactory.BaseType*
  commentId: Overload:PluginAPI.Core.Factories.PlayerFactory.BaseType
  name: BaseType
  nameWithType: PlayerFactory.BaseType
  fullName: PluginAPI.Core.Factories.PlayerFactory.BaseType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: PluginAPI.Core.Interfaces.IGameComponent
  commentId: T:PluginAPI.Core.Interfaces.IGameComponent
  parent: PluginAPI.Core.Interfaces
  name: IGameComponent
  nameWithType: IGameComponent
  fullName: PluginAPI.Core.Interfaces.IGameComponent
- uid: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Create(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}.Create(PluginAPI.Core.Interfaces.IGameComponent)
  parent: PluginAPI.Core.Factories.Factory{PluginAPI.Core.Player}
  definition: PluginAPI.Core.Factories.Factory`1.Create(PluginAPI.Core.Interfaces.IGameComponent)
  name: Create(IGameComponent)
  nameWithType: Factory<Player>.Create(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.Create(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of Player).Create(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).Create(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.Create(PluginAPI.Core.Interfaces.IGameComponent)
    name: Create
    nameWithType: Factory<Player>.Create
    fullName: PluginAPI.Core.Factories.Factory<PluginAPI.Core.Player>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.Create(PluginAPI.Core.Interfaces.IGameComponent)
    name: Create
    nameWithType: Factory(Of Player).Create
    fullName: PluginAPI.Core.Factories.Factory(Of PluginAPI.Core.Player).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core.Factories.PlayerFactory.Create*
  commentId: Overload:PluginAPI.Core.Factories.PlayerFactory.Create
  name: Create
  nameWithType: PlayerFactory.Create
  fullName: PluginAPI.Core.Factories.PlayerFactory.Create
- uid: PluginAPI.Core.Player
  commentId: T:PluginAPI.Core.Player
  parent: PluginAPI.Core
  name: Player
  nameWithType: Player
  fullName: PluginAPI.Core.Player
- uid: PluginAPI.Core.Factories.Factory`1.Create(PluginAPI.Core.Interfaces.IGameComponent)
  commentId: M:PluginAPI.Core.Factories.Factory`1.Create(PluginAPI.Core.Interfaces.IGameComponent)
  name: Create(IGameComponent)
  nameWithType: Factory<T>.Create(IGameComponent)
  fullName: PluginAPI.Core.Factories.Factory<T>.Create(PluginAPI.Core.Interfaces.IGameComponent)
  nameWithType.vb: Factory(Of T).Create(IGameComponent)
  fullName.vb: PluginAPI.Core.Factories.Factory(Of T).Create(PluginAPI.Core.Interfaces.IGameComponent)
  spec.csharp:
  - uid: PluginAPI.Core.Factories.Factory`1.Create(PluginAPI.Core.Interfaces.IGameComponent)
    name: Create
    nameWithType: Factory<T>.Create
    fullName: PluginAPI.Core.Factories.Factory<T>.Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PluginAPI.Core.Factories.Factory`1.Create(PluginAPI.Core.Interfaces.IGameComponent)
    name: Create
    nameWithType: Factory(Of T).Create
    fullName: PluginAPI.Core.Factories.Factory(Of T).Create
  - name: (
    nameWithType: (
    fullName: (
  - uid: PluginAPI.Core.Interfaces.IGameComponent
    name: IGameComponent
    nameWithType: IGameComponent
    fullName: PluginAPI.Core.Interfaces.IGameComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: PluginAPI.Core
  commentId: N:PluginAPI.Core
  name: PluginAPI.Core
  nameWithType: PluginAPI.Core
  fullName: PluginAPI.Core
